1. We are getting secret values error while pushing to the git repo what is the command to resolve that?
Ans: If your configuration file contains sensitive data, consider using environment variables instead. 
You can create a .env file and add it to your .gitignore to prevent it from being committed.
# .env
SECRET_KEY=your_secret_key

Depending on your programming language, you can load the configuration file or environment variables in your code.
For example, in Python, you can use the dotenv library:
Python
from dotenv import load_dotenv
import os

load_dotenv()
secret_key = os.getenv('SECRET_KEY')

2. What is the major issue that resolvedd by yourself?

3. Difference between availability set and availability region?
Ans:
Availability Sets:
Distributes VMs across fault domains within the same datacenter.
Reduces risk of simultaneous VM downtime due to hardware or update failures.
Applicable only to VMs.
Acceptable downtime: ~22 minutes/month.
Availability Zones:
Spreads VMs across different zones within an Azure region.
Provides 99.99% SLA (less than 5 minutes downtime/month).
Protects VMs from entire datacenter failures.
Applicable to various Azure services.

4. Did you created YAML pipeline?
Ans: I have created classic editor without YAML which is template based pipeline
For YAML pipeline:
# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'x64'
  buildConfiguration: 'Release'
  appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: 'CalculatorApp.sln'
    vsVersion: '16.0'
    msbuildArgs: '/p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageDir="$(appxPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload'
    clean: true

- task: VSTest@2
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: 'CalculatorApp.Tests/bin/Release/CalculatorApp.Tests.dll'
    searchFolder: '$(System.DefaultWorkingDirectory)'
    codeCoverageEnabled: true
- task: BuildQualityChecks@7
  inputs:
    checkCoverage: true
    coverageFailOption: 'fixed'
    coverageType: 'blocks'
    coverageThreshold: '20'
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(agent.builddirectory)'
    Contents: |
      **\*.runsettings  
      **\*Nunit.FunctionalTest*\**\bin\$(BuildConfiguration)\**
    TargetFolder: '$(build.artifactstagingdirectory)\FunctionalTests'
- task: PublishSymbols@2
  displayName: 'Publish symbols path'
  inputs:
    SearchPattern: '**\bin\**\*.pdb'
    PublishSymbols: false
  continueOnError: true
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

If we have two nsg's for one vm one with subnet and another direct to nic which connection we use with url?
Subnet NSG: This NSG applies to all resources within the subnet. It filters traffic before it reaches the VM’s NIC.
NIC NSG: This NSG applies specifically to the VM’s NIC. It filters traffic after it has passed through the subnet NSG.
When accessing a URL or any resource, the traffic will be evaluated against the rules in both NSGs. 
The rules with the highest priority (lowest number) will be applied first, regardless of whether they are in the subnet NSG or the NIC NSG
What are the uses of service endpoints?

Ans: Service endpoints allow you to secure your critical Azure service resources to only your virtual networks.
This means that your data is not exposed to the public internet, reducing the risk of unauthorized access.
Ex: Azure Storage- Allows secure access to Azure Storage accounts from within your virtual network
