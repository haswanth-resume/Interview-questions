1. Where is the dependency of Maven loads from?
Ans: sh 'mvn -s settings.xml -DskipTests install'
To download Nexus dependencies it uses pom.xml file and for the proxy and user, password it uses settings.xml

2. What are files created after unit tests and static code analysis?
Ans: Checkstyle file and surefire-reports

3. CI-jenkins steps:
Ans: BUILD, UNIT TEST, INTEGRATION TEST, CODE ANALYSIS WITH CHECKSTYLE, CODE ANALYSIS with SONARQUBE, Publish to Nexus Repository Manager.
Unit test, static code analysis, static code quality, automation, reports, deployment

4. How to take backup og Jenkins server?
Ans: goto jenkins folder in jenkins server and type below command
tar -czvf jenkins_cicdjobs. tar.gz jenkins

5. How to maintain a CI/CD pipeline of Jenkins in GitHub?
To maintain a CI/CD pipeline in Jenkins with GitHub, follow these steps:
Version control Jenkins configuration using Git.
Define the pipeline with a Jenkinsfile in the projectâ€™s GitHub repository.
Set up webhooks in GitHub to trigger Jenkins pipelines.
Manage sensitive data securely with Jenkins credentials.
Keep Jenkins plugins up to date for the latest features and security.
Regularly review and update pipeline configurations.
Include automated tests for pipeline configuration.
Monitor build logs for issues and failures.
Use version control for pipeline code to enable rollbacks.
Consider Infrastructure as Code (IaC) for infrastructure provisioning.
Maintain documentation for the CI/CD pipeline.
Encourage collaboration and code reviews for pipeline improvements.
Implement backups and disaster recovery plans.
Ensure compliance and security in your CI/CD pipeline.

6. Jenkins pipeline
Ans: 
def COLOR_MAP = [
    'SUCCESS': 'good', 
    'FAILURE': 'danger',
]
pipeline {
    agent any
    tools {
        maven "MAVEN3"
        jdk "OracleJDK8"
    }
    
    environment {
        SNAP_REPO = 'vprofile-snapshot'
		NEXUS_USER = 'admin'
		NEXUS_PASS = 'admin123'
		RELEASE_REPO = 'vprofile-release'
		CENTRAL_REPO = 'vpro-maven-central'
		NEXUSIP = '172.31.5.4'
		NEXUSPORT = '8081'
		NEXUS_GRP_REPO = 'vpro-maven-group'
        NEXUS_LOGIN = 'nexuslogin'
        SONARSERVER = 'sonarserver'
        SONARSCANNER = 'sonarscanner'
        registryCredential = 'ecr:us-west-1:awscreds'
        appRegistry = '951401132355.dkr.ecr.us-west-1.amazonaws.com/vprofileappimg'
        vprofileRegistry = "https://951401132355.dkr.ecr.us-west-1.amazonaws.com"
        cluster = "vprostaging"
        service = "vproappprodsvc"
    }

    stages {
        stage('Build'){
            steps {
                sh 'mvn -s settings.xml -DskipTests install'
            }
            post {
                success {
                    echo "Now Archiving."
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

        stage('Test'){
            steps {
                sh 'mvn -s settings.xml test'
            }

        }

        stage('Checkstyle Analysis'){
            steps {
                sh 'mvn -s settings.xml checkstyle:checkstyle'
            }
        }

        stage('Sonar Analysis') {
            environment {
                scannerHome = tool "${SONARSCANNER}"
            }
            steps {
               withSonarQubeEnv("${SONARSERVER}") {
                   sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
              }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage("UploadArtifact"){
            steps{
                nexusArtifactUploader(
                  nexusVersion: 'nexus3',
                  protocol: 'http',
                  nexusUrl: "${NEXUSIP}:${NEXUSPORT}",
                  groupId: 'QA',
                  version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                  repository: "${RELEASE_REPO}",
                  credentialsId: "${NEXUS_LOGIN}",
                  artifacts: [
                    [artifactId: 'vproapp',
                     classifier: '',
                     file: 'target/vprofile-v2.war',
                     type: 'war']
                  ]
                )
            }
        }

        stage('Build App Image') {
            steps {
                script {
                    dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
                }
            }
        }
        
        stage('Upload App Image') {
          steps{
            script {
              docker.withRegistry( vprofileRegistry, registryCredential ) {
                dockerImage.push("$BUILD_NUMBER")
                dockerImage.push('latest')
              }
            }
          }
        }

        stage('Deploy to ECS staging') {
            steps {
                withAWS(credentials: 'awscreds', region: 'us-west-1') {
                    sh 'aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment'
                } 
            }
        }
    }
    post {
        always {
            echo 'Slack Notifications.'
            slackSend channel: '#jenkinscicd',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        }
    }
}
