Webapp creation steps:

cd ~
mkdir countdownExpressApp
cd countdownExpressApp


node.js is a runtime environment
 
in Terminal:
npx express-generator  ##create scaffold

in routes folder and in index.js
Add below line after var router = express.Router();
let launchTime = new Date("12/29/2022 10:00").getTime(); 

res.render('index', { title: 'Express' }); replace with below three lines
let currentTime = new Date().getTime();
let numberOfMilliseconds = parseInt(launchTime - currentTime);
res.render('index', { title: 'Countdown to Launch', countDown: numberOfMilliseconds });


in views and in index.jade
p Welcome to #{title} replace with p Only a few days left until our new game launch!
add new line below taht
p Countdown: #{countDown} milliseconds

Now run the webapp
npm install
npm start


Open a web browser and navigate to the address http://localhost:3000


In the Azure explorer, connect to your Azure subscription and sign in.

Create a new app in Azure App Service with a globally unique name.

Select an operating system and version for the virtual machines. The extension creates a new App Service plan and resource group to contain your web app.

Select a folder that contains the source code. The extension deploys this code and starts that webapp.

To start a debugging session, right-click the app in the Azure explorer and then select Start Remote Debugging:



Now, you can deploy your Express.js site to Azure:

In Visual Studio Code, in the Azure explorer, right-click the webapp you created, and then select Deploy to Web App.

Click Browse, locate the countdownExpressApp folder in your home folder, and then click Select.

If you are asked if you would like to update your workspace configuration, select No, and don't show again.

If you are asked if you are sure, click Deploy. If you are asked if you always want to deploy this workspace to App Service, click Yes.

When the deployment is complete, select Browse Website. Then Azure website is displayed in your browser. Notice that the website is hosted in the azurewebsites.net domain.


Let's start by modifying the code, so that it calculates a whole number of days:

Start Visual Studio Code if it is not already running.

If the countdownExpressApp folder is not already open, then on the File menu, select Open Folder... and then browse to the folder.

In the Visual Studio Code Explorer window, expand routes, and then select index.js.

Locate this line of code:

let numberOfMilliseconds = parseInt(launchTime - currentTime);
On the next line, type this new code:


let numberOfDays = parseInt(numberOfMilliseconds/(24 * 3600 * 1000));

Locate this line of code:

res.render('index', { title: 'Countdown to Launch', countDown: numberOfMilliseconds });
Replace that line with this line of code:

res.render('index', { title: 'Countdown to Launch', countDown: numberOfDays });
On the File menu, select Save, then close the index.js file.

Modify the view to display the countdown in days
You must also alter the view slightly:

Using the Code Explorer window, open /views/index.jade.

Locate this line of code:

p Countdown: #{countDown} milliseconds
Replace that line with this line of code:

p Countdown: #{countDown} days
On the File menu, select Save, then close the index.jade file.

Publish the new version
Your changes are complete. Let's deploy the finished website to Azure:

In Visual Studio Code, in the Azure Explorer, right-click the webapp you created, and then select Deploy to Web App.

Select the countdownExpressApp folder, and then select Deploy.

When the deployment is complete, select Browse Website. Then Azure website is displayed in your browser. Notice that the countdown is now displayed in days.
