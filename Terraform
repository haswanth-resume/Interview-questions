Question: Did you implement the Terraform pipeline and how?
Ans: Create a project in Azure Devops Organization, create terraform code, define Ci/CD steps like in azure-pipeline.yml file write the steps of code checkout, running terraform commands, archiving the terraform plan as an artifact.
configure Azure pipelines and trigger pipeline.

Notes: Every build needs to run on agent and every agent needs to be run on a VM.

Question: What is remote state manager in Terraform?
Ans: Remote state management simplifies collaboration, reduces conflicts and enhances coordination when working with Terraform in a team.
Terraform remote state is a mechanism that allows Terraform to store its state information in a centralized location, such as an object storage bucket or a remote key-value store.

Question: How do you implement rolling updates?
Ans: Rolling updates in Terraform refer to a deployment strategy where newer instances or resources (such as containers) are incrementally added to the infrastructure, while older resources are gradually drained and removed. 
The goal is to keep the services continuously available throughout the deployment process, minimizing downtime and ensuring a smooth transition to the updated version.

Question: Do you know about Zero Downtime Deployment?
Zero Downtime Deployment (ZDD) is a practice that ensures services remain available to users even during software updates.
The goal is to make changes without causing any noticeable disruption.
In the context of Terraform, ZDD involves strategies to update infrastructure seamlessly. Let’s explore two key techniques:
->Create Before Destroy
->Local-Exec or Remote-Exec Provisioner

Question: What is dependencies between resources?
Ans: Explicitly specifying a dependency is only necessary when a resource relies on some other resource’s behavior but doesn’t access any of that 
resource’s data in its arguments.
For example, if you have an EC2 instance and an S3 bucket, you might want the EC2 instance to be created before the S3 bucket. 
In this case, you can specify the dependency explicitly using depends_on:
By doing this, Terraform ensures that the EC2 instance is created before the S3 bucket during the execution of terraform apply.

Question: How to handle sensitive data and secrets in terraform?
Ans: Mark Variables as Sensitive:
Terraform allows you to mark input variables as “sensitive.” When you do this, Terraform redacts the secrets from the console output.
For example, if you have an API key or a database password, you can mark it as sensitive in your configuration.
Here’s how you can define a sensitive variable:
variable "api_key" {
  type    = string
  sensitive = true
}
Use Environment Variables:
Store secret values (such as API keys, passwords, or tokens) in environment variables.
However, keep in mind that anyone with access to the host will also have access to these environment variables.
Remote State Storage:
By default, Terraform stores the state file locally (as unencrypted JSON), which can expose sensitive data if someone gains access to the project files.
Consider using a remote backend (such as DigitalOcean Spaces) to store your state. Remote backends automatically encrypt data at rest, enhancing security.

Question: What are workspaces in terraform?
Ans: Terraform starts with a single workspace named “default”.
The workspace feature of Terraform allows users to switch between multiple instances of a single configuration with a unique state file.
For local states, Terraform stores the workspace states in a directory called terraform.tfstate.d.
Workspace commands:
The terraform workspace new command is used to create a new workspace and switched to a new workspace.
The terraform workspace list command is used to list all existing workspaces.
The terraform workspace select command is used to choose a different workspace to use for further operations.
The terraform workspace delete command is used to delete an existing workspace.
The terraform workspace show command is used to output the current workspace.
Note: Terraform Cloud and Terraform CLI both have features called “workspaces,” but they’re slightly different.

Question: When statefile is locked and write the unlock command?
Ans: State locking happens automatically on all operations that could write state. You won’t see any message that it is happening. If state locking fails, 
Terraform will not continue. You can disable state locking for most commands with the -lock flag but it is not recommended.
Terraform has a force-unlock command to manually unlock the state if unlocking failed.
First, identify the lock ID associated with the state you want to unlock. You can find this lock ID in the .tfstate.lock file.
Run the following command, replacing LOCK_ID with the actual lock ID:
terraform force-unlock LOCK_ID

Question: Benefits of Terraform?
Ans: Speed, Consistency, Codified, Minimun Risk, Cost, Version Controlled, Many Cloud platform one solution, Reusability.

Question: What are provisioners in  Terraform?
Ans: Provisioners can be used to model specific actions on the local machine or on a remote machine in order to prepare servers or other 
infrastructure objects for service.
Provisioners are inside the resource block.
Types of provisioners:
local-exec Provisioner
remote-exec Provisioner
Creation-time Provisioners
Destroy-time Provisioners

Question: What is Terraform format?
Ans: The terraform fmt command is used to rewrite Terraform configuration files to a canonical format and style.
For use-case, where all configuration written by team members needs to have a proper style of code, terraform fmt can be used.

Question: What is Terraform Import and DataSource?
Ans: Terraform is able to import existing infrastructure. 
This allows you to take resources that you’ve created by some other means and bring them under Terraform management.
The current implementation of Terraform import can only import resources into the state. It does not generate a configuration.
Because of this, prior to running terraform import, it is necessary to write a resource configuration block manually for the resource, to which the 
imported object will be mapped.
terraform import aws_instance.myec2 instance-id
Data sources allow data to be fetched or computed for use elsewhere in Terraform configuration.
Data resources cause Terraform only to read objects.

Question: What is Terraform Output command?
Ans: The terraform output command is used to extract the value of an output variable from the state file.

Question: What is Modules in Terraform?
Ans: A module is a simple directory that contains other .tf files. Using modules we can make the code reusable. Modules are local or remote.
Calling Child Modules:
Input variables- to accept values from the calling module.
Output values- to return results to the calling module, which it can then use to populate arguments elsewhere.
Resources- to define one or more infrastructure objects that the module will manage.
